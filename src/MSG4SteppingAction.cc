#include "MSG4SteppingAction.hh"
#include "MSG4DetectorConstruction.hh"
#include "MSG4Run.hh"
#include "MSG4PrimaryGeneratorAction.hh"

#include "G4Step.hh"
#include "G4RunManager.hh"
#include "G4SystemOfUnits.hh"

#include "G4Material.hh"
#include "G4Element.hh"

#include "G4VProcess.hh"
#include "G4ProcessType.hh"
#include "G4HadronicProcessType.hh"
#include "G4Neutron.hh"

#include "G4SteppingManager.hh"

MSG4SteppingAction::MSG4SteppingAction(): G4UserSteppingAction(), isScattered(false)
{
}

MSG4SteppingAction::~MSG4SteppingAction()
{}

void MSG4SteppingAction::UserSteppingAction(const G4Step* step) {
	const G4VProcess* pro;
	if ( (pro = step->GetPostStepPoint()->GetProcessDefinedStep()) && // Reaction occured
		pro->GetProcessType() == fHadronic // only in Hadronic reaction
	) {
		switch(pro->GetProcessSubType()) {
			// Elastic
			case fHadronElastic:
			{
				// G4cout << step->GetPreStepPoint()->GetTouchableHandle()->GetVolume()->GetLogicalVolume()->GetName() << G4endl;
				//  G4cout << GetSecondaryParticle() << G4endl;
				isScattered = true;
				break;
			}
			// Capture
			case fCapture:
			{
				MSG4Run* run = static_cast<MSG4Run*>(G4RunManager::GetRunManager()->GetNonConstCurrentRun());
				const MSG4PrimaryGeneratorAction* generatorAction = static_cast<const MSG4PrimaryGeneratorAction*>(G4RunManager::GetRunManager()->GetUserPrimaryGeneratorAction());
// #define AUSAMPLE
#ifdef AUSAMPLE
				G4String targetNucleus = "Au198";
#else
				// G4String targetNucleus = "Ba139";
				std::array<G4String, 6> sample_isotopes = {"Ba139", "Ba138", "Ba137", "Ba136", "O17", "C13"};
#endif
				// G4bool flag = false;
				G4int index = -1;
				G4int nSecAtRest = fpSteppingManager->GetfN2ndariesAtRestDoIt();
				G4int nSecAlong = fpSteppingManager->GetfN2ndariesAlongStepDoIt();
				G4int nSecPost = fpSteppingManager->GetfN2ndariesPostStepDoIt();
				G4int nSecTotal = nSecAtRest+nSecAlong+nSecPost;
				G4TrackVector* secVec = fpSteppingManager->GetfSecondary();
 				if(nSecTotal>0) {
					for(size_t lp1=(*secVec).size()-nSecTotal; lp1<(*secVec).size(); lp1++) {
						// if((*secVec)[lp1]->GetDefinition()->GetParticleName() == targetNucleus) {
						// 	flag = true;
						// }
						G4String captured = (*secVec)[lp1]->GetDefinition()->GetParticleName();
						for (size_t j = 0; j < 6; j++) {
							if (captured == sample_isotopes[j]) {
								index = j;
							}
						}
						if (index == -1) {
							G4cout << captured << G4endl;
						}
					}
				}

				G4double neutron_energy = generatorAction->GetIncidentNeutronEnergy();
				run->inc_gated(neutron_energy, index, isScattered);
				break;
			}
			// Other Reaction
			default:
			// No need to run code here,
			// but these comment-outed lines shows what other reaction happened.
			/*
			{
				G4int nSecAtRest = fpSteppingManager->GetfN2ndariesAtRestDoIt();
				G4int nSecAlong = fpSteppingManager->GetfN2ndariesAlongStepDoIt();
				G4int nSecPost = fpSteppingManager->GetfN2ndariesPostStepDoIt();
				G4int nSecTotal = nSecAtRest+nSecAlong+nSecPost;
				G4TrackVector* secVec = fpSteppingManager->GetfSecondary();
 				if(nSecTotal>0) {
					for(size_t lp1=(*secVec).size()-nSecTotal; lp1<(*secVec).size(); lp1++) {
						G4cout << " " << std::setw(18) << (*secVec)[lp1]->GetDefinition()->GetParticleName()
						<< " generated by " << (*secVec)[lp1]->GetCreatorProcess()->GetProcessName()
						 << G4endl;
						}
					}
			}
			*/
			break;
		}
	}

}

G4String MSG4SteppingAction::GetReactionName() {
	const G4TrackVector* secVec = fpSteppingManager->GetSecondary();
	return secVec->back()->GetCreatorProcess()->GetProcessName();
}

G4String MSG4SteppingAction::GetSecondaryParticle() {
	const G4TrackVector* secVec = fpSteppingManager->GetSecondary();
	return secVec->back()->GetDefinition()->GetParticleName();
}


// memo
// enum G4HadronicProcessType
// {
//   fHadronElastic =    111,
//   fHadronInelastic =  121,
//   fCapture =          131,
//   fFission =          141,
//   fHadronAtRest =     151,
//   fLeptonAtRest =     152,
//   fChargeExchange =   161,
//   fRadioactiveDecay = 210
// };
